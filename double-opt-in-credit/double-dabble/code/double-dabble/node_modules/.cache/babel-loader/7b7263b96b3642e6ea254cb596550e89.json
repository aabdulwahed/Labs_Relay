{"remainingRequest":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/Users/ugolino/Developer/double-dabble/node_modules/vuetify-loader/lib/loader.js!/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ugolino/Developer/double-dabble/node_modules/vue-metamask/src/VueMetamask.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ugolino/Developer/double-dabble/node_modules/vue-metamask/src/VueMetamask.vue","mtime":1556488992527},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1549808549571},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1549808543619},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/vuetify-loader/lib/loader.js","mtime":1556377652953},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1549808549571},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1556291729158}],"contextDependencies":[],"result":["export default {\n  props: {\n    userMessage: {\n      type: String,\n      default: \"null\"\n    }\n  },\n  data: function data() {\n    return {\n      web3: null,\n      MetaMaskId: \"1\",\n      // main net netID\n      netID: '1',\n      // user metamask id\n      MetaMaskAddress: \"\",\n      // user Address\n      Web3Interval: null,\n      AccountInterval: null,\n      NetworkInterval: null,\n      stateLog: null,\n      isComplete: false,\n      type: \"INIT\",\n      MetamaskMsg: {\n        LOAD_MATAMASK_WALLET_ERROR: 'Loading metamask error, please try later',\n        EMPTY_METAMASK_ACCOUNT: 'Please log in to your metamask to continue with this app.',\n        NETWORK_ERROR: 'The connection is abnormal, please try again',\n        METAMASK_NOT_INSTALL: 'Please install metamask for this application',\n        METAMASK_TEST_NET: 'Currently not in the main network.',\n        METAMASK_MAIN_NET: 'Currently Main network'\n      }\n    };\n  },\n  methods: {\n    checkWeb3: function checkWeb3() {\n      var web3 = window.web3;\n\n      if (typeof web3 === 'undefined') {\n        this.web3 = null;\n        this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n      }\n    },\n    checkAccounts: function checkAccounts() {\n      var _this = this;\n\n      if (this.web3 === null) return;\n      this.web3.eth.getAccounts(function (err, accounts) {\n        if (err != null) return _this.Log(_this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n\n        if (accounts.length === 0) {\n          _this.MetaMaskAddress = \"\";\n\n          _this.Log(_this.MetamaskMsg.EMPTY_METAMASK_ACCOUNT, 'NO_LOGIN');\n\n          return;\n        }\n\n        _this.MetaMaskAddress = accounts[0]; // user Address\n      });\n    },\n    checkNetWork: function checkNetWork() {\n      var _this2 = this;\n\n      this.web3.version.getNetwork(function (err, netID) {\n        // Main Network: 1\n        // Ropsten Test Network: 3\n        // Kovan Test Network: 42\n        // Rinkeby Test Network: 4\n        if (err != null) return _this2.Log(_this2.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n        _this2.netID = netID; //User MetaMask's current status\n\n        if (_this2.MetaMaskAddress !== '' && netID === '1') return _this2.Log(_this2.MetamaskMsg.METAMASK_TEST_NET, 'MAINNET');\n        if (_this2.MetaMaskAddress !== '' && netID === '3') return _this2.Log(_this2.MetamaskMsg.METAMASK_TEST_NET, 'ROPSTEN');\n        if (_this2.MetaMaskAddress !== '' && netID === '42') return _this2.Log(_this2.MetamaskMsg.METAMASK_TEST_NET, 'LOVAN');\n        if (_this2.MetaMaskAddress !== '' && netID === '4') return _this2.Log(_this2.MetamaskMsg.METAMASK_TEST_NET, 'RINKEBY');\n        if (_this2.MetaMaskAddress !== '') _this2.Log(_this2.MetamaskMsg.METAMASK_MAIN_NET, \"MAINNET\");\n      });\n    },\n    Log: function Log(msg) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var letType = type;\n      if (letType === this.type) return;\n      var message = this.userMessage === \"null\" ? msg : this.userMessage;\n      this.type = type;\n      this.$emit(\"onComplete\", {\n        web3: this.web3,\n        type: type,\n        metaMaskAddress: this.MetaMaskAddress,\n        message: message,\n        netID: this.netID\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    var web3 = window.web3;\n\n    if (typeof web3 !== 'undefined') {\n      window.web3 = new Web3(web3.currentProvider);\n      this.web3 = window.web3;\n      this.checkAccounts();\n      this.checkNetWork();\n      this.Web3Interval = setInterval(function () {\n        return _this3.checkWeb3();\n      }, 1000);\n      this.AccountInterval = setInterval(function () {\n        return _this3.checkAccounts();\n      }, 1000);\n      this.NetworkInterval = setInterval(function () {\n        return _this3.checkNetWork();\n      }, 1000);\n    } else {\n      this.web3 = null;\n      this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n    }\n  }\n};",{"version":3,"sources":["VueMetamask.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\nexport default {\n    props: {\n        userMessage:{\n            type: String,\n            default: \"null\"\n        }\n    },\n    data(){\n        return {\n            web3: null,\n            MetaMaskId: \"1\",        // main net netID\n            netID: '1',             // user metamask id\n            MetaMaskAddress: \"\",    // user Address\n            Web3Interval: null,\n            AccountInterval: null,\n            NetworkInterval: null,\n            stateLog: null,\n            isComplete: false,\n            type: \"INIT\",\n            MetamaskMsg:{\n                LOAD_MATAMASK_WALLET_ERROR: 'Loading metamask error, please try later',\n                EMPTY_METAMASK_ACCOUNT: 'Please log in to your metamask to continue with this app.',\n                NETWORK_ERROR: 'The connection is abnormal, please try again',\n                METAMASK_NOT_INSTALL: 'Please install metamask for this application',\n                METAMASK_TEST_NET: 'Currently not in the main network.',\n                METAMASK_MAIN_NET: 'Currently Main network',\n            }\n        };\n    },\n    methods:{\n        checkWeb3() {\n            let web3 = window.web3;\n            if (typeof web3 === 'undefined') {\n                this.web3 = null;\n                this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n            }\n        },\n        checkAccounts() {\n            if (this.web3 === null) return;\n            this.web3.eth.getAccounts((err, accounts) => {\n                if (err != null) return this.Log(this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n                if (accounts.length === 0){\n                    this.MetaMaskAddress = \"\";\n                    this.Log(this.MetamaskMsg.EMPTY_METAMASK_ACCOUNT, 'NO_LOGIN');\n                    return;\n                } \n                this.MetaMaskAddress = accounts[0]; // user Address\n            });\n        },\n        checkNetWork() {\n            this.web3.version.getNetwork((err, netID) => {\n                // Main Network: 1\n                // Ropsten Test Network: 3\n                // Kovan Test Network: 42\n                // Rinkeby Test Network: 4\n                if (err != null) return this.Log(this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n                this.netID = netID;    //User MetaMask's current status\n                if( this.MetaMaskAddress !== '' && netID === '1') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'MAINNET');\n                if( this.MetaMaskAddress !== '' && netID === '3') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'ROPSTEN');\n                if( this.MetaMaskAddress !== '' && netID === '42') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'LOVAN');\n                if( this.MetaMaskAddress !== '' && netID === '4') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'RINKEBY');\n                if( this.MetaMaskAddress !== '') this.Log(this.MetamaskMsg.METAMASK_MAIN_NET, \"MAINNET\");\n            })\n        },\n        Log(msg, type=\"\"){\n            const letType = type;\n            if(letType === this.type) return;\n            const message = this.userMessage === \"null\" ? msg : this.userMessage;\n            this.type = type;\n            this.$emit(\"onComplete\", {\n                web3: this.web3,\n                type,\n                metaMaskAddress: this.MetaMaskAddress,\n                message,\n                netID: this.netID,\n            });\n        }\n    },\n    mounted(){\n        let web3 = window.web3;\n        if (typeof web3 !== 'undefined') {\n            window.web3 = new Web3(web3.currentProvider);\n            this.web3 = window.web3;\n            this.checkAccounts();\n            this.checkNetWork();\n            this.Web3Interval = setInterval(()=> this.checkWeb3(), 1000);\n            this.AccountInterval = setInterval(()=> this.checkAccounts(), 1000);\n            this.NetworkInterval = setInterval(()=>this.checkNetWork(), 1000);\n        } else {\n            this.web3 = null;\n            this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n        }\n    }\n};\n</script>\n<template>\n    <div class=\"vue-metamask\"></div>\n</template>\n<style scoped>\n    .vue-metamask{\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n    }\n</style>\n"],"sourceRoot":"node_modules/vue-metamask/src"}]}