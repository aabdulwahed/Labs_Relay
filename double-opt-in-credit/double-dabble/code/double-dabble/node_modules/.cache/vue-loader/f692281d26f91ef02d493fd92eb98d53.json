{"remainingRequest":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ugolino/Developer/double-dabble/node_modules/vue-metamask/src/VueMetamask.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ugolino/Developer/double-dabble/node_modules/vue-metamask/src/VueMetamask.vue","mtime":1556488992527},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1549808549571},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1549808543619},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/vuetify-loader/lib/loader.js","mtime":1556377652953},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1549808549571},{"path":"/Users/ugolino/Developer/double-dabble/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1556291729158}],"contextDependencies":[],"result":["\nexport default {\n    props: {\n        userMessage:{\n            type: String,\n            default: \"null\"\n        }\n    },\n    data(){\n        return {\n            web3: null,\n            MetaMaskId: \"1\",        // main net netID\n            netID: '1',             // user metamask id\n            MetaMaskAddress: \"\",    // user Address\n            Web3Interval: null,\n            AccountInterval: null,\n            NetworkInterval: null,\n            stateLog: null,\n            isComplete: false,\n            type: \"INIT\",\n            MetamaskMsg:{\n                LOAD_MATAMASK_WALLET_ERROR: 'Loading metamask error, please try later',\n                EMPTY_METAMASK_ACCOUNT: 'Please log in to your metamask to continue with this app.',\n                NETWORK_ERROR: 'The connection is abnormal, please try again',\n                METAMASK_NOT_INSTALL: 'Please install metamask for this application',\n                METAMASK_TEST_NET: 'Currently not in the main network.',\n                METAMASK_MAIN_NET: 'Currently Main network',\n            }\n        };\n    },\n    methods:{\n        checkWeb3() {\n            let web3 = window.web3;\n            if (typeof web3 === 'undefined') {\n                this.web3 = null;\n                this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n            }\n        },\n        checkAccounts() {\n            if (this.web3 === null) return;\n            this.web3.eth.getAccounts((err, accounts) => {\n                if (err != null) return this.Log(this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n                if (accounts.length === 0){\n                    this.MetaMaskAddress = \"\";\n                    this.Log(this.MetamaskMsg.EMPTY_METAMASK_ACCOUNT, 'NO_LOGIN');\n                    return;\n                } \n                this.MetaMaskAddress = accounts[0]; // user Address\n            });\n        },\n        checkNetWork() {\n            this.web3.version.getNetwork((err, netID) => {\n                // Main Network: 1\n                // Ropsten Test Network: 3\n                // Kovan Test Network: 42\n                // Rinkeby Test Network: 4\n                if (err != null) return this.Log(this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n                this.netID = netID;    //User MetaMask's current status\n                if( this.MetaMaskAddress !== '' && netID === '1') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'MAINNET');\n                if( this.MetaMaskAddress !== '' && netID === '3') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'ROPSTEN');\n                if( this.MetaMaskAddress !== '' && netID === '42') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'LOVAN');\n                if( this.MetaMaskAddress !== '' && netID === '4') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'RINKEBY');\n                if( this.MetaMaskAddress !== '') this.Log(this.MetamaskMsg.METAMASK_MAIN_NET, \"MAINNET\");\n            })\n        },\n        Log(msg, type=\"\"){\n            const letType = type;\n            if(letType === this.type) return;\n            const message = this.userMessage === \"null\" ? msg : this.userMessage;\n            this.type = type;\n            this.$emit(\"onComplete\", {\n                web3: this.web3,\n                type,\n                metaMaskAddress: this.MetaMaskAddress,\n                message,\n                netID: this.netID,\n            });\n        }\n    },\n    mounted(){\n        let web3 = window.web3;\n        if (typeof web3 !== 'undefined') {\n            window.web3 = new Web3(web3.currentProvider);\n            this.web3 = window.web3;\n            this.checkAccounts();\n            this.checkNetWork();\n            this.Web3Interval = setInterval(()=> this.checkWeb3(), 1000);\n            this.AccountInterval = setInterval(()=> this.checkAccounts(), 1000);\n            this.NetworkInterval = setInterval(()=>this.checkNetWork(), 1000);\n        } else {\n            this.web3 = null;\n            this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n        }\n    }\n};\n",{"version":3,"sources":["VueMetamask.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueMetamask.vue","sourceRoot":"node_modules/vue-metamask/src","sourcesContent":["<script>\nexport default {\n    props: {\n        userMessage:{\n            type: String,\n            default: \"null\"\n        }\n    },\n    data(){\n        return {\n            web3: null,\n            MetaMaskId: \"1\",        // main net netID\n            netID: '1',             // user metamask id\n            MetaMaskAddress: \"\",    // user Address\n            Web3Interval: null,\n            AccountInterval: null,\n            NetworkInterval: null,\n            stateLog: null,\n            isComplete: false,\n            type: \"INIT\",\n            MetamaskMsg:{\n                LOAD_MATAMASK_WALLET_ERROR: 'Loading metamask error, please try later',\n                EMPTY_METAMASK_ACCOUNT: 'Please log in to your metamask to continue with this app.',\n                NETWORK_ERROR: 'The connection is abnormal, please try again',\n                METAMASK_NOT_INSTALL: 'Please install metamask for this application',\n                METAMASK_TEST_NET: 'Currently not in the main network.',\n                METAMASK_MAIN_NET: 'Currently Main network',\n            }\n        };\n    },\n    methods:{\n        checkWeb3() {\n            let web3 = window.web3;\n            if (typeof web3 === 'undefined') {\n                this.web3 = null;\n                this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n            }\n        },\n        checkAccounts() {\n            if (this.web3 === null) return;\n            this.web3.eth.getAccounts((err, accounts) => {\n                if (err != null) return this.Log(this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n                if (accounts.length === 0){\n                    this.MetaMaskAddress = \"\";\n                    this.Log(this.MetamaskMsg.EMPTY_METAMASK_ACCOUNT, 'NO_LOGIN');\n                    return;\n                } \n                this.MetaMaskAddress = accounts[0]; // user Address\n            });\n        },\n        checkNetWork() {\n            this.web3.version.getNetwork((err, netID) => {\n                // Main Network: 1\n                // Ropsten Test Network: 3\n                // Kovan Test Network: 42\n                // Rinkeby Test Network: 4\n                if (err != null) return this.Log(this.MetamaskMsg.NETWORK_ERROR, \"NETWORK_ERROR\");\n                this.netID = netID;    //User MetaMask's current status\n                if( this.MetaMaskAddress !== '' && netID === '1') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'MAINNET');\n                if( this.MetaMaskAddress !== '' && netID === '3') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'ROPSTEN');\n                if( this.MetaMaskAddress !== '' && netID === '42') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'LOVAN');\n                if( this.MetaMaskAddress !== '' && netID === '4') return this.Log(this.MetamaskMsg.METAMASK_TEST_NET, 'RINKEBY');\n                if( this.MetaMaskAddress !== '') this.Log(this.MetamaskMsg.METAMASK_MAIN_NET, \"MAINNET\");\n            })\n        },\n        Log(msg, type=\"\"){\n            const letType = type;\n            if(letType === this.type) return;\n            const message = this.userMessage === \"null\" ? msg : this.userMessage;\n            this.type = type;\n            this.$emit(\"onComplete\", {\n                web3: this.web3,\n                type,\n                metaMaskAddress: this.MetaMaskAddress,\n                message,\n                netID: this.netID,\n            });\n        }\n    },\n    mounted(){\n        let web3 = window.web3;\n        if (typeof web3 !== 'undefined') {\n            window.web3 = new Web3(web3.currentProvider);\n            this.web3 = window.web3;\n            this.checkAccounts();\n            this.checkNetWork();\n            this.Web3Interval = setInterval(()=> this.checkWeb3(), 1000);\n            this.AccountInterval = setInterval(()=> this.checkAccounts(), 1000);\n            this.NetworkInterval = setInterval(()=>this.checkNetWork(), 1000);\n        } else {\n            this.web3 = null;\n            this.Log(this.MetamaskMsg.METAMASK_NOT_INSTALL, \"NO_INSTALL_METAMASK\");\n        }\n    }\n};\n</script>\n<template>\n    <div class=\"vue-metamask\"></div>\n</template>\n<style scoped>\n    .vue-metamask{\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n    }\n</style>\n"]}]}